// <auto-generated />
using System;
using AllaURL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AllaURL.Data.Migrations
{
    [DbContext(typeof(AllaUrlDbContext))]
    [Migration("20250118104143_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllaURL.Data.Entities.TokenDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TokenDataId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TokenDataId");

                    b.HasIndex("Id", "TokenDataId")
                        .IsUnique();

                    b.ToTable("TokenDataEntity");
                });

            modelBuilder.Entity("AllaURL.Data.Entities.TokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllocated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TokenDataEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("TokenDataEntityId");

                    b.ToTable("TokenEntity");
                });

            modelBuilder.Entity("AllaURL.Data.Entities.UrlEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("RedirectUrl")
                        .IsUnique();

                    b.ToTable("UrlEntity");
                });

            modelBuilder.Entity("AllaURL.Data.Entities.VCardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("VcardType")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("VCardEntity");

                    b.HasDiscriminator<int>("VcardType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AllaURL.Data.Entities.CompanyVCardEntity", b =>
                {
                    b.HasBaseType("AllaURL.Data.Entities.VCardEntity");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("AllaURL.Data.Entities.PersonVCardEntity", b =>
                {
                    b.HasBaseType("AllaURL.Data.Entities.VCardEntity");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("AllaURL.Data.Entities.TokenDataEntity", b =>
                {
                    b.HasOne("AllaURL.Data.Entities.UrlEntity", null)
                        .WithMany()
                        .HasForeignKey("TokenDataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AllaURL.Data.Entities.VCardEntity", null)
                        .WithMany()
                        .HasForeignKey("TokenDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AllaURL.Data.Entities.TokenEntity", b =>
                {
                    b.HasOne("AllaURL.Data.Entities.TokenDataEntity", null)
                        .WithOne()
                        .HasForeignKey("AllaURL.Data.Entities.TokenEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllaURL.Data.Entities.TokenDataEntity", "TokenDataEntity")
                        .WithMany()
                        .HasForeignKey("TokenDataEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TokenDataEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
